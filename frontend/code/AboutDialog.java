/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;

import java.awt.event.*;
import symantec.itools.awt.InvisibleHTMLLink;
import symantec.itools.awt.LabelHTMLLink;
class AboutDialog extends java.awt.Dialog   {

	public AboutDialog(Frame parent, boolean modal)
	{
		super(parent, modal);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.

		//{{INIT_CONTROLS
		setLayout(new GridLayout(5,1,0,0));
		setVisible(false);
		setSize(249,150);
		label2 = new java.awt.Label("CT & VT Calibration Tester",Label.CENTER);
		label2.setBounds(0,0,568,61);
		label2.setFont(new Font("Dialog", Font.BOLD, 12));
		add(label2);
		label1 = new java.awt.Label("(C) PROMET",Label.CENTER);
		label1.setBounds(0,61,568,61);
		label1.setFont(new Font("Dialog", Font.BOLD, 12));
		label1.setBackground(new Color(16777215));
		add(label1);
		label3 = new java.awt.Label("Version 1.1",Label.CENTER);
		label3.setBounds(0,122,568,61);
		add(label3);
		label4 = new java.awt.Label("");
		label4.setBounds(0,183,568,61);
		add(label4);
		okButton = new java.awt.Button();
		okButton.setLabel("OK");
		okButton.setBounds(0,244,568,61);
		add(okButton);
		setTitle("AboutDialog");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		//}}

	}

	public AboutDialog(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().bounds();
    		Rectangle abounds = bounds();

    		move(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + (bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Label label2;
	java.awt.Label label1;
	java.awt.Label label3;
	java.awt.Label label4;
	java.awt.Button okButton;
	//}}

        // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymWindow extends java.awt.event.WindowAdapter 
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == AboutDialog.this)
				AboutDialog_WindowClosing(event);
		}
	}

	void AboutDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
                dispose();
	}

	class SymAction implements java.awt.event.ActionListener   
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_Clicked(event);
		}
	}

	void okButton_Clicked(java.awt.event.ActionEvent event)
	{
		//{{CONNECTION
		// Clicked from okButton Hide the Dialog
                dispose();
		//}}
	}
}
